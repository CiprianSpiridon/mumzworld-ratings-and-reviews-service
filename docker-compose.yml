services:
    # FrankenPHP Service for Web with Octane and Horizon (Development)
  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
      cache_from:
        - dunglas/frankenphp:latest-php8.2-alpine
    container_name: ${APP_NAME:-mumzworld-cart-service}-dev
    restart: unless-stopped
    ports:
      - "3000:80"
      - "443:443"
      - "9003:9003" # Xdebug port
      - "2019:2019" # FrankenPHP admin port
    volumes:
      - ./:/app
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - composer-cache:/root/.composer/cache
    networks:
      - app-network
    depends_on:
      - redis
      - dynamodb
    environment:
      - APP_NAME=${APP_NAME:-mumzworld-cart-service}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DYNAMODB_ENDPOINT=http://dynamodb:${DYNAMODB_PORT}
      - DYNAMODB_TABLE=ratings_and_reviews
      - OCTANE_SERVER=frankenphp
      - QUEUE_CONNECTION=redis
      - QUEUE_DRIVER=redis
      - HORIZON_ENVIRONMENT=local
      - APP_ENV=local
      - HORIZON_PREFIX=local
  # FrankenPHP Service for Web with Octane and Horizon (Production)
  app-production:
    build:
      context: .
      dockerfile: docker/app/Dockerfile.production
      cache_from:
        - dunglas/frankenphp:latest-php8.2-alpine
    container_name: ${APP_NAME:-mumzworld-cart-service}-prod
    restart: unless-stopped
    ports:
      - "3000:80" # Different port to avoid conflict with dev
    networks:
      - app-network
    depends_on:
      - redis
    environment:
      - APP_NAME=${APP_NAME:-mumzworld-cart-service}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - DYNAMODB_ENDPOINT=${DYNAMODB_ENDPOINT}
      - DYNAMODB_TABLE=${DYNAMODB_TABLE}
      - OCTANE_SERVER=frankenphp
      - QUEUE_CONNECTION=redis
      - QUEUE_DRIVER=redis
      - HORIZON_ENVIRONMENT=production
      - APP_ENV=production
      - APP_DEBUG=true
  # Redis Service
  redis:
    image: redis:alpine
    container_name: ${APP_NAME:-mumzworld-cart-service}-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # Redis Commander - Redis Admin UI
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ${APP_NAME:-mumzworld-cart-service}-redis-admin
    restart: unless-stopped
    ports:
      - "8081:8081"
    networks:
      - app-network
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin

  # DynamoDB Local
  dynamodb:
    env_file: .env
    image: amazon/dynamodb-local:latest
    container_name: ${APP_NAME:-mumzworld-cart-service}-dynamodb
    restart: unless-stopped
    ports:
      - "${DYNAMODB_PORT}:8000"
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data"
    volumes:
      - ./docker/dynamodb/data:/home/dynamodblocal/data
    networks:
      - app-network

  # DynamoDB Admin
  dynamodb-admin:
    env_file: .env
    image: aaronshaf/dynamodb-admin
    container_name: ${APP_NAME:-mumzworld-cart-service}-dynamodb-admin
    restart: unless-stopped
    ports:
      - "${DYNAMODB_ADMIN_PORT}:8001"
    environment:
      - DYNAMO_ENDPOINT=http://dynamodb:${DYNAMODB_PORT}
    depends_on:
      - dynamodb
    networks:
      - app-network

networks:
  app-network:
    driver: bridge 


volumes:
  redis-data:
  composer-cache: